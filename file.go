package enki

import (
	"go/format"
	"io"
	"os"
	"strings"

	"github.com/pkg/errors"
)

type fileBuilder struct {
	*typeBuilder
	generatedComment string
	pkg              string
	imports          []string
}

// NewFile creates new file builder
func NewFile() *fileBuilder {
	return &fileBuilder{typeBuilder: NewType()}
}

func (fb *fileBuilder) GeneratedBy(tool string) File {
	fb.generatedComment = "// Code generated by " + tool + ". DO NOT EDIT."
	return fb
}

func (fb *fileBuilder) Package(pkg string) File {
	fb.pkg = pkg
	return fb
}

func (fb *fileBuilder) AddImport(alias, path string) File {
	def := alias + " " + path
	fb.imports = append(fb.imports, def)
	return fb
}

func (fb *fileBuilder) Type(name string) Type {
	fb.typeBuilder.reset()
	return fb.typeBuilder.Name(name)
}

func (fb *fileBuilder) Function(name string) FunctionDef {
	fb.functionBuilder.reset()
	return fb.functionBuilder.Name(name)
}

func (fb *fileBuilder) Materialize() {}

func (fb *fileBuilder) Write(dest io.Writer) error {
	if fb.Err() != nil {
		return fb.Err()
	}
	top := NewStatement()
	if fb.generatedComment != "" {
		top.Line(fb.generatedComment)
		top.NewLine()
	}
	top.Line("package @1", fb.pkg)
	top.NewLine()
	if len(fb.imports) > 0 {
		top.Line("import (")
		for _, s := range fb.imports {
			top.Line(`"@1"`, strings.Trim(s, " "))
		}
		top.Line(")")
	}
	top.NewLine()
	_, err := top.inner.WriteString(fb.inner.String())
	if err != nil {
		return errors.Wrap(err, "write base")
	}
	formatted, err := format.Source([]byte(top.inner.String()))
	if err != nil {
		return errors.Wrap(err, "go fmt file")
	}
	_, err = dest.Write(formatted)
	if err != nil {
		return errors.Wrap(err, "write to dest")
	}
	return nil
}

func (fb *fileBuilder) Create(fileName string) error {
	file, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return errors.Wrap(err, "create file")
	}
	defer file.Close()
	if err = fb.Write(file); err != nil {
		return errors.Wrap(err, "write")
	}
	return nil
}

func (fb *fileBuilder) Append(fileName string) error {
	file, err := os.OpenFile(fileName, os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		return errors.Wrap(err, "open file")
	}
	defer file.Close()
	if err = fb.Write(file); err != nil {
		return errors.Wrap(err, "append")
	}
	return nil
}
